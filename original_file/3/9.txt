1
00:00:09,001 --> 00:00:11,065
我們介紹這個ethernet的這個protocol呢

2
00:00:11,065 --> 00:00:13,061
所謂的CSMA/CD嘛

3
00:00:13,061 --> 00:00:16,055
那接下來我們來看一下 這樣子的protocol呢

4
00:00:16,055 --> 00:00:19,068
它的效能到底好不好 因為我們說

5
00:00:19,068 --> 00:00:23,015
我們每次要送封包之前都要先去聽聽看

6
00:00:23,015 --> 00:00:28,015
如果是idle我們就送出去 如果是busy我們就等

7
00:00:28,015 --> 00:00:30,051
那送出去的時候也有可能發生collision

8
00:00:30,051 --> 00:00:32,051
collision的時候呢我們就把她

9
00:00:32,051 --> 00:00:34,048
送一個jam 把它停掉

10
00:00:34,048 --> 00:00:39,035
然後我們等待一個時間 再來重新再嘗試一次

11
00:00:39,035 --> 00:00:43,031
這樣的protocol呢 我們講他的效能到底好不好

12
00:00:43,031 --> 00:00:47,068
我們就說 事實上呢這種ethernet的這個整個運作呢

13
00:00:47,068 --> 00:00:51,025
他是在我們叫做lightly load的的時候是最好的

14
00:00:51,025 --> 00:00:53,018
就是所謂的load很輕的時候

15
00:00:53,018 --> 00:00:57,075
所謂的load很輕 就是說這個時候網路上面呢

16
00:00:57,075 --> 00:01:01,001
沒有什麼工作站要送封包

17
00:01:01,001 --> 00:01:03,015
就是比較少數啦

18
00:01:03,015 --> 00:01:06,011
那很少數的這個工作站想要送的話

19
00:01:06,011 --> 00:01:08,045
幾乎他每次一來 一送就成功

20
00:01:08,045 --> 00:01:12,018
所以我們接下來我們看一個他那個這個圖

21
00:01:12,018 --> 00:01:14,058
這個圖 這個圖本身的橫軸是所謂的loading

22
00:01:14,058 --> 00:01:17,041
loading就是說我網路到底有

23
00:01:17,041 --> 00:01:19,058
這個附載重不重

24
00:01:19,058 --> 00:01:23,098
loading很輕就代表說想要送封包的這個PC啦

25
00:01:23,098 --> 00:01:26,025
或者station呢 這個數量很少

26
00:01:26,025 --> 00:01:30,005
那loading很重的時候 代表說我可能有大家都想送

27
00:01:30,005 --> 00:01:31,088
那大家都有封包要送

28
00:01:31,088 --> 00:01:34,068
那我們縱軸呢是所謂的throughput

29
00:01:34,068 --> 00:01:36,018
throughput就是說

30
00:01:36,018 --> 00:01:41,035
到底可以成功的送出去這樣的封包的數量有多少個

31
00:01:41,035 --> 00:01:46,025
我們看一下他的曲線是這樣子

32
00:01:48,055 --> 00:01:52,015
我們發現一個很有趣的這個曲線就是說

33
00:01:52,015 --> 00:01:55,088
我們在這個左邊這個地方 像這個地方的話

34
00:01:55,088 --> 00:01:58,035
我們說

35
00:01:58,035 --> 00:02:01,068
這個地方我們叫做所謂的loading比較輕

36
00:02:01,068 --> 00:02:06,025
因為在橫軸的最左邊 loading很輕的時候呢

37
00:02:06,025 --> 00:02:10,011
他的throughput跟你的loading幾乎成正比

38
00:02:10,011 --> 00:02:12,051
也就是說這個時候不太發生衝撞

39
00:02:12,051 --> 00:02:15,091
就是你想送多少 幾乎都會成功啦

40
00:02:15,091 --> 00:02:18,021
就是說我們的loading很輕的時候

41
00:02:18,021 --> 00:02:22,048
想送的封包量 跟可以成功送出去的封包量

42
00:02:22,048 --> 00:02:24,095
幾乎是相同的

43
00:02:24,095 --> 00:02:28,011
所以他幾乎就是正比的這樣的向上的曲線

44
00:02:28,011 --> 00:02:29,015
這個時候是很好

45
00:02:29,015 --> 00:02:31,041
就是你有多少要送 就可以送多少

46
00:02:31,041 --> 00:02:34,088
但是呢 隨著這個loading越來越重的時候呢

47
00:02:34,088 --> 00:02:37,011
就會開始發生collision了

48
00:02:37,011 --> 00:02:39,061
所以他在一個最高的這個點

49
00:02:39,061 --> 00:02:42,031
我們叫所謂的optimal的這種點的時候呢

50
00:02:42,031 --> 00:02:44,031
是最好 代表是說

51
00:02:44,031 --> 00:02:46,098
你的loading呢其實到了這一點

52
00:02:46,098 --> 00:02:48,055
loading這一點

53
00:02:48,055 --> 00:02:50,081
可是你的throughput呢還是非常的好

54
00:02:50,081 --> 00:02:53,068
還是很高 那過了這一點之後呢

55
00:02:53,068 --> 00:02:58,065
我們就開始發現一個現象就是說 你loading再增加

56
00:02:58,065 --> 00:03:01,045
就是有更多的封包要送的時候呢

57
00:03:01,045 --> 00:03:03,025
我的throughput開始往下掉

58
00:03:03,025 --> 00:03:06,005
就代表說我的collision呢開始發生

59
00:03:06,005 --> 00:03:09,081
那我們這邊一往下掉 就會越來越嚴重

60
00:03:09,081 --> 00:03:14,021
那我們事實上再發現說 這個loading再加重

61
00:03:14,021 --> 00:03:18,078
這個throughput往下掉的這個速度呢就更快

62
00:03:18,078 --> 00:03:21,008
因為這種loading再增加

63
00:03:21,008 --> 00:03:23,018
就是開始發生大量的collision

64
00:03:23,018 --> 00:03:27,041
那發生大量的collision代表說 我們的throughput就開始下降

65
00:03:27,041 --> 00:03:29,088
因為大部分的封包都沒有效

66
00:03:29,088 --> 00:03:31,088
大部份的封包都會撞在一起

67
00:03:31,088 --> 00:03:34,001
所以這是很嚴重的現象

68
00:03:34,001 --> 00:03:36,081
那甚至loading再繼續加再繼續加

69
00:03:36,081 --> 00:03:42,028
我們發現說 這個throughput他甚至會接到這個地方來

70
00:03:42,028 --> 00:03:46,035
這個地方我們說 幾乎是等於0啦

71
00:03:46,035 --> 00:03:48,075
就是說他的loading如果繼續增加

72
00:03:48,075 --> 00:03:51,055
他有可能甚至說沒有一個封包可以成功

73
00:03:51,055 --> 00:03:54,038
大部份的封包幾乎所有的封包

74
00:03:54,038 --> 00:03:57,011
每次送出去呢就跟人家collision

75
00:03:57,011 --> 00:03:59,055
那我們delay 再來還是collision

76
00:03:59,055 --> 00:04:01,058
再來還是collision 再來還是collision

77
00:04:01,058 --> 00:04:03,025
所以如果發生這個現象

78
00:04:03,025 --> 00:04:06,091
這個loading就事實上已經超過這個網路可以負荷了

79
00:04:06,091 --> 00:04:08,075
那這個時候網路怎麼辦

80
00:04:08,075 --> 00:04:11,021
就是網路沒有什麼辦法 幾乎網路就是癱瘓了

81
00:04:11,021 --> 00:04:14,075
這就是因為loading太重了 那唯一的辦法就是說

82
00:04:14,075 --> 00:04:17,025
大家暫時先不要送 暫時有些先離開

83
00:04:17,025 --> 00:04:19,088
那這就是ethernet的特性就是說

84
00:04:19,088 --> 00:04:22,058
在heavy load 我們講heavy load的時候呢

85
00:04:22,058 --> 00:04:26,018
會有太多的網路的這個整個頻寬

86
00:04:26,018 --> 00:04:29,011
都浪費在collision的這種現象

87
00:04:29,011 --> 00:04:31,011
那這個也是ethernet的一個致命傷

88
00:04:31,011 --> 00:04:33,011
就是說ethernet本身

89
00:04:33,011 --> 00:04:38,011
當然我們講的這個是從最早期這個cable 這個bus

90
00:04:38,011 --> 00:04:41,008
bus結構的這個角度來看

91
00:04:41,008 --> 00:04:43,061
因為他是一個廣播的這個媒介嘛

92
00:04:43,061 --> 00:04:46,058
所以兩個封包 對不起兩個station

93
00:04:46,058 --> 00:04:50,028
或者兩個封包同時送上來的時候呢 他就發生collision

94
00:04:50,028 --> 00:04:53,081
那這是他的網路的架構

95
00:04:53,081 --> 00:04:58,011
是bus的架構 protocol呢是CSMA/CD

96
00:04:58,011 --> 00:05:01,081
在load很輕的時候呢 它的效能很好

97
00:05:01,081 --> 00:05:05,035
可是load很重的時候呢 因為發生collision

98
00:05:05,035 --> 00:05:07,078
甚至發生嚴重的collision

99
00:05:07,078 --> 00:05:10,038
那throughput就會降的非常高

100
00:05:10,038 --> 00:05:12,038
甚至呢最後變成0

101
00:05:12,038 --> 00:05:14,038
這也是為什麼在早期的時候呢

102
00:05:14,038 --> 00:05:19,078
這個ethernet呢只能用在一般我們的像辦公室的網路啦

103
00:05:19,078 --> 00:05:24,008
或者家庭網路 那我們知道在整個產業鏈裡面

104
00:05:24,008 --> 00:05:28,045
還有一塊非常重要的就是工廠自動化

105
00:05:28,045 --> 00:05:30,038
那在工廠自動化裡面

106
00:05:30,038 --> 00:05:34,025
我們這個網路要控制的可能都是一些工廠的一些設備啊

107
00:05:34,025 --> 00:05:36,091
尤其像甚至像鍋爐啊

108
00:05:36,091 --> 00:05:40,065
這種非常非常需要及時去控管

109
00:05:40,065 --> 00:05:42,068
譬如說 鍋爐本身溫度太高

110
00:05:42,068 --> 00:05:45,018
你必須去把一些什麼關掉

111
00:05:45,018 --> 00:05:47,028
那這種都是所謂的控制訊號

112
00:05:47,028 --> 00:05:49,038
控制訊號在工廠自動化裡面

113
00:05:49,038 --> 00:05:52,021
他必須立刻送到那個設備上面去

114
00:05:52,021 --> 00:05:56,025
如果他用ethernet 你可以想像會發生什麼問題

115
00:05:56,025 --> 00:05:58,005
如果loading很重又用ethernet

116
00:05:58,005 --> 00:06:01,008
那根本就封包就丟不出去啊 因為全部都collision

117
00:06:01,008 --> 00:06:05,005
所以在當時呢這個工廠自動化的部分呢

118
00:06:05,005 --> 00:06:06,031
基本上是不用ethernet

119
00:06:06,031 --> 00:06:09,038
因為用了ethernet就是他有這個風險

120
00:06:09,038 --> 00:06:11,055
就是萬一loading很重的時候呢

121
00:06:11,055 --> 00:06:13,048
他可能封包根本送不出去

122
00:06:13,048 --> 00:06:17,028
所以早期這種工廠自動化 是不用ethernet的

123
00:06:17,028 --> 00:06:20,055
但是現在我們等下會介紹就是說

124
00:06:20,055 --> 00:06:25,025
因為 因為呢我們事實上這個ethernet的結構呢

125
00:06:25,025 --> 00:06:29,051
已經從bus 現在已經進展到所謂的switch

126
00:06:29,051 --> 00:06:32,011
我們以前也介紹過 進展到switch啦

127
00:06:32,011 --> 00:06:35,095
那進展到switch呢 他的collision的問題就解決了

128
00:06:35,095 --> 00:06:38,051
基本上 等於說幾乎就沒有collision了

129
00:06:38,051 --> 00:06:40,051
這個我們等一下再補充

130
00:06:40,051 --> 00:06:42,051
好 那最後我們看一下

131
00:06:42,051 --> 00:06:48,068
這個在IEEE802.3這個ethernet呢 他還有哪些標準

132
00:06:48,068 --> 00:06:54,011
那我們說 802.3本身因為它算是一個family

133
00:06:54,011 --> 00:06:57,091
算是一系列的這種ethernet的演進 我們說從最早期

134
00:06:57,091 --> 00:07:04,011
從我們說2Mb也有到10Mb 也有到100Mb的

135
00:07:04,011 --> 00:07:06,005
也有到Gb ethernet

136
00:07:06,005 --> 00:07:11,008
甚至現在10G的Gb ethernet也都非常的成熟

137
00:07:11,008 --> 00:07:15,071
那在實驗室呢 甚至已經有100Gbps的ethernet

138
00:07:15,071 --> 00:07:21,018
也就是說他有這麼多種ethernet速度從2Mb到100G

139
00:07:22,015 --> 00:07:26,041
速度差異這麼大 但是他們的protocol呢 一樣

140
00:07:26,041 --> 00:07:29,011
大家都是跑CDMA/CD

141
00:07:29,011 --> 00:07:32,095
這個是雖然我們的算是速度上

142
00:07:32,095 --> 00:07:36,095
有不同的這個標準 不同的這個版本

143
00:07:36,095 --> 00:07:41,005
但是我們的MAC protocol都還是跑CSMA/CD

144
00:07:41,005 --> 00:07:44,011
那我們的frame format 就是封包的格式呢

145
00:07:44,011 --> 00:07:46,041
還是大家都維持一致

146
00:07:46,041 --> 00:07:49,038
這是ethernet這個系列標準裡面很重要的

147
00:07:49,038 --> 00:07:51,038
但是不一樣的地方在哪裡

148
00:07:51,038 --> 00:07:55,048
我們要跑這個速度 要快到

149
00:07:55,048 --> 00:08:00,015
我們剛剛提到像Gb ethernet 10G啦 甚至100G

150
00:08:00,015 --> 00:08:04,038
在這麼高的速度之下 我們的這個physical layer

151
00:08:04,038 --> 00:08:07,018
就是我們的線材就必須不一樣

152
00:08:07,018 --> 00:08:11,005
這個時候到了100Gb 甚至都一定都是跑光纖的

153
00:08:11,005 --> 00:08:14,058
因為光纖的速度 以光速來講 夠快嘛

154
00:08:14,058 --> 00:08:17,028
所以事實上我們等於是說在physical layer這一塊

155
00:08:17,028 --> 00:08:20,045
我們就有兩種 一個就是所謂的fiber 就是跑光纖

156
00:08:20,045 --> 00:08:25,031
一個就是跑傳統的cable 就是所謂的電纜的部分

157
00:08:25,031 --> 00:08:28,098
那我們所以看一下 最下面這個圖裡面

158
00:08:28,098 --> 00:08:32,028
我們的這個physical layer本身可以跑所謂的copper

159
00:08:32,028 --> 00:08:36,011
就是銅線的部分 也就是cable的部分啦

160
00:08:36,011 --> 00:08:41,008
那他有我們這邊上面有像100BASE-TX啦

161
00:08:41,008 --> 00:08:45,031
100BASE-T4啦 或者100BASE-T2啦

162
00:08:45,031 --> 00:08:48,048
那個T就代表twisted pair 那有的2有的4

163
00:08:48,048 --> 00:08:51,045
可能代表他的那個線材啦 距離啦

164
00:08:51,045 --> 00:08:54,051
那右邊這邊呢是所謂的fiber

165
00:08:54,051 --> 00:08:59,038
就是我們線材可以有不同的這個線材

166
00:08:59,038 --> 00:09:03,045
那以fiber來講的話 我們有所謂的100BASE-F

167
00:09:03,045 --> 00:09:09,095
F就代表fiber 那我們有100BASE-S 這個S

168
00:09:10,075 --> 00:09:12,041
這個S就是所謂的short

169
00:09:12,041 --> 00:09:15,085
就是因為我們走這個光纖的時候呢

170
00:09:15,085 --> 00:09:19,031
就是用光嘛 啊光波本身有長波短波的意思啦

171
00:09:19,031 --> 00:09:22,045
所以等於說 針對不同的網路的速度

172
00:09:22,045 --> 00:09:26,078
我們有的用光纖 有的用所謂的銅軸 或者銅線

173
00:09:26,078 --> 00:09:29,015
然後用光纖的時候呢

174
00:09:29,015 --> 00:09:31,015
我們會有長波的會有短波的

175
00:09:31,015 --> 00:09:33,015
反正有各種各樣的技術

176
00:09:33,015 --> 00:09:34,071
這是所謂的physical layer

177
00:09:34,071 --> 00:09:38,028
就是實體層的技術呢 都會被引進來

178
00:09:38,028 --> 00:09:40,061
為了讓我們傳輸的時候更快

179
00:09:40,061 --> 00:09:42,078
然後距離希望能夠送的遠一點

180
00:09:42,078 --> 00:09:46,058
然後可以速度更快一點  但是我們特別強調

181
00:09:46,058 --> 00:09:50,001
不管我們的physical layer 是所謂的銅線 是光纖

182
00:09:50,001 --> 00:09:55,011
我們最上面第二層MAC layer還是CSMA/CD

183
00:09:55,011 --> 00:09:57,071
然後用我們原來的ethernet 的這個frame

184
00:09:57,071 --> 00:09:59,045
這是非常重要的

185
00:09:59,045 --> 00:10:02,058
好 最後呢 我們來做一個summary

186
00:10:02,058 --> 00:10:05,045
就針對這個ethernet呢 做一個總結

187
00:10:05,045 --> 00:10:08,081
我們說 ethernet不管他的系列是怎麼樣

188
00:10:08,081 --> 00:10:11,021
不管他的速度有多快 速度有多慢

189
00:10:11,021 --> 00:10:15,098
不管他是用什麼樣的所謂的physical layer的材料

190
00:10:15,098 --> 00:10:17,075
不管是銅線不管是光纖

191
00:10:17,075 --> 00:10:21,088
他的MAC protocol都叫做CSMA/CD

192
00:10:21,088 --> 00:10:25,075
然後都是connectionless的service 就是說

193
00:10:25,075 --> 00:10:30,048
在傳輸的過程當中 是不需要建連線的

194
00:10:30,048 --> 00:10:32,068
就是我們只要把封包準備好

195
00:10:32,068 --> 00:10:35,098
然後依循CSMA/CD的protocol

196
00:10:35,098 --> 00:10:40,058
就是我要送之前我先聽聽看 如果是idle我就送出去

197
00:10:40,058 --> 00:10:42,045
如果是busy 我就等

198
00:10:42,045 --> 00:10:45,025
等到他變成idle的時候再把他送出去

199
00:10:45,025 --> 00:10:47,061
這個protocol呢都是一樣

200
00:10:47,061 --> 00:10:50,051
這個protocol本身我們就叫做connectionless

201
00:10:50,051 --> 00:10:51,095
因為他不用建連線

202
00:10:51,095 --> 00:10:54,075
當然我們也叫做unreliable transmission

203
00:10:54,075 --> 00:10:58,028
就是我送出去呢 不代表 不保證對方一定收到

204
00:10:58,028 --> 00:11:00,018
那我們之前也已經介紹了

205
00:11:00,018 --> 00:11:01,081
就是說我們在ethernet裡面

206
00:11:01,081 --> 00:11:06,028
我們是很努力的想要把一個封包丟出去嘛

207
00:11:06,028 --> 00:11:09,035
我們甚至努力到什麼程度呢 努力到說

208
00:11:09,035 --> 00:11:11,031
你這個封包連續衝撞

209
00:11:11,031 --> 00:11:15,035
不要超過16次 我都會再來一次

210
00:11:15,035 --> 00:11:19,015
再等待一個時間之後呢 再來把這個封包再試一次

211
00:11:19,015 --> 00:11:20,078
其實我們ethernet的protocol

212
00:11:20,078 --> 00:11:25,035
這個CSMA/CD其實是非常非常努力 非常盡力啦

213
00:11:25,035 --> 00:11:27,085
一個封包發生collision 我會再來

214
00:11:27,085 --> 00:11:30,061
再collision我會再來 再來再來 我會連續來16次

215
00:11:30,061 --> 00:11:32,095
都試著把這個封包送出去

216
00:11:32,095 --> 00:11:37,028
當然如果說 網路已經壅塞到實在是沒辦法

217
00:11:37,028 --> 00:11:40,025
那這個封包連續衝撞16次我們會放棄

218
00:11:40,025 --> 00:11:42,035
這是放棄的部份

219
00:11:42,035 --> 00:11:44,085
但是我們所謂的unreliable呢

220
00:11:44,085 --> 00:11:46,098
其實還有一層的意義就是說

221
00:11:47,065 --> 00:11:52,048
我們雖然會嘗試著把一個封包把他送出去

222
00:11:52,048 --> 00:11:56,001
包含說16次 連續嘗試16次

223
00:11:56,001 --> 00:11:57,055
好 中間可能有一次

224
00:11:57,055 --> 00:11:59,038
你送出去了 沒有collision

225
00:11:59,038 --> 00:12:02,041
就是沒有collision 這個封包對這個

226
00:12:02,041 --> 00:12:05,081
所謂的傳送的這個state來講 他的任務就結束

227
00:12:05,081 --> 00:12:07,081
他的目的就是要把一個封包

228
00:12:07,081 --> 00:12:10,028
我們講 成功的送出去

229
00:12:10,028 --> 00:12:13,048
雖然送出去的過程當中 可能發生collision

230
00:12:13,048 --> 00:12:17,025
哪我就重來嘛 但是我什麼時候會把這個封包

231
00:12:17,025 --> 00:12:19,071
等於說他的任務把它結束呢？

232
00:12:19,071 --> 00:12:21,098
就兩個 一個就是我真的送不出去了

233
00:12:21,098 --> 00:12:25,008
連續16次的衝撞 我這個封包我就放棄

234
00:12:25,008 --> 00:12:28,021
要不然的話我這個封包就會把他送出去

235
00:12:28,021 --> 00:12:31,098
那你成功的送出去 就代表對方一定成功的收到嗎

236
00:12:31,098 --> 00:12:35,045
不一定喔 我們成功的送出去

237
00:12:35,045 --> 00:12:38,031
那為什麼對方會沒有收到呢

238
00:12:38,031 --> 00:12:41,031
因為即使沒有collision

239
00:12:41,031 --> 00:12:44,085
那他也可能發生所謂的 我們叫interference

240
00:12:44,085 --> 00:12:47,095
就是所謂的干擾 譬如說電磁波的干擾

241
00:12:47,095 --> 00:12:49,095
讓你的封包的內容譬如說

242
00:12:49,095 --> 00:12:52,045
1變0 0變1 因為被干擾了

243
00:12:52,045 --> 00:12:55,098
那被干擾的這個封包呢 我們知道receiver

244
00:12:55,098 --> 00:12:58,078
他收到一個封包 注意到

245
00:12:58,078 --> 00:13:01,025
這個封包是沒有collision的

246
00:13:01,025 --> 00:13:04,078
這是沒有collision的 所以既然沒有collision

247
00:13:04,078 --> 00:13:07,088
那個sender呢就不會重送 他已經送出去了

248
00:13:07,088 --> 00:13:10,005
沒有collision 他的任務就結束了

249
00:13:10,005 --> 00:13:12,048
但是沒有collision的封包

250
00:13:12,048 --> 00:13:14,078
不代表一定正確的會收的到

251
00:13:14,078 --> 00:13:16,015
因為沒有collision

252
00:13:16,015 --> 00:13:19,015
但是呢也有可能interference被干擾

253
00:13:19,015 --> 00:13:21,088
所以他沒有collision可是內容壞掉了

254
00:13:21,088 --> 00:13:25,085
阿receiver收到之後呢 他就會做一個檢查

255
00:13:25,085 --> 00:13:27,055
說裡面的內容有沒有錯誤

256
00:13:27,055 --> 00:13:30,008
因為我們有一個叫做frame check sequence

257
00:13:30,008 --> 00:13:34,025
用CRC32做一個檢查碼 如果說萬一這個內容呢

258
00:13:34,025 --> 00:13:37,051
在傳送過程當中 被所謂的干擾 壞掉了

259
00:13:37,051 --> 00:13:41,058
那receiver雖然成功的收到一個封包

260
00:13:41,058 --> 00:13:43,041
但是經過檢查之後

261
00:13:43,041 --> 00:13:47,028
發現內容是錯誤的 他會把這個封包丟棄

262
00:13:47,028 --> 00:13:51,038
也就是說 送的呢是成功的送出去了

263
00:13:51,038 --> 00:13:53,091
可是收的呢 也成功地收到

264
00:13:53,091 --> 00:13:55,091
可是內容是錯的 他就要把它丟掉

265
00:13:55,091 --> 00:13:59,038
那這個封包呢 也結束了 就是sender已經送完

266
00:13:59,038 --> 00:14:01,065
他已經沒事了 receiver收到把它丟掉

267
00:14:01,065 --> 00:14:05,018
那這個封包 怎麼辦 就沒有啦

268
00:14:05,018 --> 00:14:09,001
所以我們叫它unreliable的transmission是指這個意思啦

269
00:14:09,001 --> 00:14:11,088
就是說 在ethernet裡面

270
00:14:11,088 --> 00:14:16,005
他每一個封包都會很努力的想要把它成功的送出去

271
00:14:16,005 --> 00:14:21,001
但是呢 成功的送出去不代表對方一定正確的收到

272
00:14:21,001 --> 00:14:24,071
那如果對方收到的是錯誤的 他會把他丟棄

273
00:14:24,071 --> 00:14:27,068
那丟棄這個封包就相當於就是沒有了

274
00:14:27,068 --> 00:14:32,015
那怎麼辦呢 如果說我們說 那我這個封包很重要啊

275
00:14:32,015 --> 00:14:33,055
對方一定要收到

276
00:14:33,055 --> 00:14:36,085
那我們就必須靠我們上面的protocol

277
00:14:36,085 --> 00:14:39,021
譬如說我們如果上面是用的TCP

278
00:14:39,021 --> 00:14:41,048
那TCP會幫我們解決這個問題

279
00:14:41,048 --> 00:14:46,015
因為TCP本身會要求對方的TCP你一定要正確的收到

280
00:14:46,015 --> 00:14:50,005
如果說像這樣 我們在第二層 這個網卡這層呢

281
00:14:50,005 --> 00:14:53,005
就把他丟棄了 那我們最後TCP是不是會發現

282
00:14:53,005 --> 00:14:56,048
這個封包根本沒有來啊 所以我們的TCP呢

283
00:14:56,048 --> 00:15:01,045
就會互相告訴對方的TCP要重送 就是重送

284
00:15:02,071 --> 00:15:07,045
那在ethernet本身就是所謂沒有重送這件事情

285
00:15:07,045 --> 00:15:11,085
ethernet本身會來重送 是因為collision

286
00:15:11,085 --> 00:15:15,018
因為衝撞 所以衝撞他會再重送

287
00:15:15,018 --> 00:15:18,018
但是如果是因為封包的錯誤 他是不會重送

288
00:15:18,018 --> 00:15:19,091
所以我們叫做unreliable的

289
00:15:19,091 --> 00:15:23,018
好那我們也說 這個ethernet的這個拓墣

290
00:15:23,018 --> 00:15:28,025
從最早期的是bus 就是10BASE5啊 10BASE2啊

291
00:15:28,025 --> 00:15:31,051
那慢慢進展到後面的所謂的switch

292
00:15:31,051 --> 00:15:36,035
那switch本身他的特色就是所謂一個類似像star的結構

293
00:15:36,035 --> 00:15:41,041
好 那最後我們提到說 在bus的結構之下

294
00:15:41,041 --> 00:15:45,015
我們所謂的bus的結構呢 我們說

295
00:15:45,015 --> 00:15:49,038
他的protocol呢叫做half-duplex transmission

296
00:15:49,038 --> 00:15:51,095
 half-duplex就是說

297
00:15:52,078 --> 00:15:58,078
兩端都可以送給對方 但是呢不可以同時送

298
00:15:58,078 --> 00:16:02,051
就是所謂half-duplex 我們通訊是雙向的

299
00:16:02,051 --> 00:16:05,051
就我A可以送給B B也可以送給A

300
00:16:05,051 --> 00:16:07,048
但是不能同時送

301
00:16:07,048 --> 00:16:10,081
這個就是我們bus的這個CSMA/CD的概念嘛

302
00:16:10,081 --> 00:16:13,058
因為你同時送就會發生collision

303
00:16:13,058 --> 00:16:17,085
就是說如果是bus 我們講bus的結構

304
00:16:17,085 --> 00:16:23,051
像10base5 10base2 甚至10baseT的那種

305
00:16:23,051 --> 00:16:27,008
如果是hub的結構的話呢 他是用所謂的half-duplex

306
00:16:27,068 --> 00:16:33,025
代表是說 同一個時間最多只能有一個可以傳輸

307
00:16:33,025 --> 00:16:36,035
同一個時間 兩個或兩個以上他就是collision

308
00:16:36,035 --> 00:16:39,081
那這種架構呢 我們說在load很輕的時候呢

309
00:16:39,081 --> 00:16:41,001
他是工作的非常好

310
00:16:41,001 --> 00:16:44,065
那load很重的時候呢他會發生collision 太多的collision

311
00:16:45,071 --> 00:16:49,021
那最後說 我們如果是在switch的話呢

312
00:16:49,021 --> 00:16:53,008
他是怎麼樣的工作呢 這個是非常重要的 就是說

313
00:16:53,008 --> 00:16:57,031
如果是在switch的結構之下 就是說

314
00:16:57,031 --> 00:16:59,095
我們有個switch的交換機 我們也介紹過

315
00:16:59,095 --> 00:17:04,081
在switch的交換機裡面 每一個接口他其實都有一個網卡

316
00:17:04,081 --> 00:17:07,041
變成說 一個一條線

317
00:17:07,041 --> 00:17:11,045
我們講一條線接到switch 一條接到這個所謂的PC的話

318
00:17:11,045 --> 00:17:14,008
PC上面有一個網卡

319
00:17:14,008 --> 00:17:16,065
這個交換機的接口呢也有一個網卡

320
00:17:16,065 --> 00:17:19,058
所以他們兩個這樣接起來的時候呢 就變成說

321
00:17:19,058 --> 00:17:22,001
這條線變成只有他們兩個專用

322
00:17:22,001 --> 00:17:26,018
注意到 這條線只有這兩端專用喔

323
00:17:26,018 --> 00:17:28,068
而且他裡面我們說 這個cable裡面

324
00:17:28,068 --> 00:17:32,041
如果是一般所謂的UDP的這種cable的話

325
00:17:32,041 --> 00:17:33,098
他裡面我們講是twisted pair

326
00:17:33,098 --> 00:17:36,068
事實上是有四對的雙絞線

327
00:17:36,068 --> 00:17:38,095
所以他有足夠的線

328
00:17:38,095 --> 00:17:43,088
讓送的呢有一條專線 收的也有一條專線

329
00:17:43,088 --> 00:17:47,015
變成兩個方向的傳輸呢 各有專線

330
00:17:47,015 --> 00:17:50,005
那各有專線的結果 我們說

331
00:17:50,005 --> 00:17:52,068
他的傳輸就叫做full-duplex

332
00:17:52,068 --> 00:17:55,008
full-duplex的意思就是說

333
00:17:55,008 --> 00:18:01,075
兩邊的通訊呢是可以雙向 而且可以同時傳送

334
00:18:01,075 --> 00:18:06,058
我們說 如果雙向通訊不能同時送 叫做half-duplex

335
00:18:06,058 --> 00:18:10,035
full-duplex就是說他是雙向傳送 而且可以同時送

336
00:18:10,035 --> 00:18:12,061
就是如果是交換機的結構的話

337
00:18:12,061 --> 00:18:14,045
我們這個PC跟交換機之間

338
00:18:14,045 --> 00:18:17,008
他可以同時送封包而且雙向喔

339
00:18:17,008 --> 00:18:19,048
阿因為他們有專屬的線路

340
00:18:19,048 --> 00:18:21,031
所以他根本就沒有collision

341
00:18:21,031 --> 00:18:24,031
但是呢他還是去跑CSMA/CD

342
00:18:24,031 --> 00:18:26,041
我們知道說不管它的結構怎麼樣

343
00:18:26,041 --> 00:18:30,011
他一定是跑這個我們講 CSMA/CD

344
00:18:30,011 --> 00:18:34,038
只是在full-duplex的時候怎麼跑 就是說你會去聽聽看

345
00:18:34,038 --> 00:18:36,008
結果一聽 一定就是idle

346
00:18:36,008 --> 00:18:38,011
因為這條線幾乎是你專用的

347
00:18:38,011 --> 00:18:40,031
你專用的線 你當然去聽啊

348
00:18:40,031 --> 00:18:42,041
可是聽了一定沒有人送 所以你就送

349
00:18:42,041 --> 00:18:45,098
那送了之後呢 一樣他還是會去聽聽看有沒有collision

350
00:18:45,098 --> 00:18:49,071
但是呢一定沒有collision 因為這條線是你專用的

351
00:18:49,071 --> 00:18:52,005
就是說即使是你專用的線路

352
00:18:52,005 --> 00:18:56,045
你還是用CSMA/CD的protocol 你還是會去聽

353
00:18:56,045 --> 00:18:59,008
但是呢一定是idle 你還是會去送

354
00:18:59,008 --> 00:19:01,088
送了之後呢你還是會繼續聽有沒有collision

355
00:19:01,088 --> 00:19:03,085
但是呢都不會有collision

356
00:19:03,085 --> 00:19:07,041
也就是說 在交換機的結構之下

357
00:19:07,041 --> 00:19:13,045
用了full-duplex的這種傳輸 事實上根本就沒有collision

358
00:19:13,045 --> 00:19:15,078
好 這就是ethernet呢

359
00:19:15,078 --> 00:19:19,055
後來演進到這個交換機最大最大的特色就是說

360
00:19:19,055 --> 00:19:23,028
他雖然還是用CSMA/CD的protocol

361
00:19:23,028 --> 00:19:26,041
但是因為它的結構呢已經變成是

362
00:19:26,041 --> 00:19:31,021
每一條線都只有兩個 一個是交換機 一個是PC

363
00:19:31,021 --> 00:19:35,068
他們之間對送 而且都是雙向同時送用專線

364
00:19:35,068 --> 00:19:38,015
變成說就沒有collision了

365
00:19:38,015 --> 00:19:40,088
那這個他的整個performance呢就非常非常的好

366
00:19:40,088 --> 00:19:45,025
我們說甚至可以達到所謂的wired speed 線速

367
00:19:45,025 --> 00:19:49,028
線速就是說 我們這個線如果是要跑10Mb

368
00:19:49,028 --> 00:19:52,078
他就可以10Mb 你跑100Mb 我就跑100Mb

369
00:19:52,078 --> 00:19:55,075
因為我都沒有collision 都沒有collision

370
00:19:55,075 --> 00:19:57,081
那交換機本身 我們也提到說

371
00:19:57,081 --> 00:19:59,081
交換機裡面有一個交換機的晶片

372
00:19:59,081 --> 00:20:02,035
這個晶片本身 封包進來

373
00:20:02,035 --> 00:20:05,091
從這個封包的處理查表再轉送

374
00:20:05,091 --> 00:20:09,011
通通都是晶片 用硬體就處理掉了

375
00:20:09,011 --> 00:20:11,011
所以我們可以做到所謂的線速

376
00:20:11,011 --> 00:20:12,028
所謂的wired speed

377
00:20:12,028 --> 00:20:16,031
就是你封包進來 就立刻出去 封包進來就立刻出去

378
00:20:16,031 --> 00:20:18,005
等於是說這個交換的速度

379
00:20:18,005 --> 00:20:20,001
等於跟我們線的速度呢

380
00:20:20,001 --> 00:20:23,065
加起來是一樣 所以變成說這個速度非常的快

381
00:20:23,065 --> 00:20:27,048
以上就是我們針對ethernet這個單元

382
00:20:27,048 --> 00:20:29,001
所做的這個介紹

